"""
<문제>
첫째 줄에 테트로미노가 놓인 칸에 쓰인 수들의 합의 최댓값 구하기
- 정사각형은 서로 겹치면 안 된다.
- 도형은 모두 연결되어 있어야 한다.
- 정사각형의 변끼리 연결돼있어야 한다.
- 회전이나 대칭을 시켜도 된다.


<풀이>
풀이 시간: 30분
가능한 테트로미노 블록의 모양은 19개, n과 m이 매우 작기 때문에 브루트포스 풀이
보드의 모든 칸에서 각 테트로미노를 놓고, 블록의 모든 좌표가 보드 안에 있다면 해당 블록의 합 계산

<시간 복잡도>
O(n * m)
"""
import sys
input = sys.stdin.readline

n, m = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(m)]

blocks = (
    ((0,1), (0,2), (0,3)),
    ((1,0), (2,0), (3,0)),
    ((1,0), (1,1), (1,2)),
    ((0,1), (1,0), (2,0)),
    ((0,1), (0,2), (1,2)),
    ((1,0), (2,0), (2,-1)),
    ((0,1), (0,2), (-1,2)),
    ((1,0), (2,0), (2,1)),
    ((0,1), (0,2), (1,0)),
    ((0,1), (1,1), (2,1)),
    ((0,1), (1,0), (1,1)),
    ((0,1), (-1,1), (-1,2)),
    ((1,0), (1,1), (2,1)),
    ((0,1), (1,1), (1,2)),
    ((1,0), (1,-1), (2,-1)),
    ((0,1), (0,2), (-1,1)),
    ((0,1), (0,2), (1,1)),
    ((1,0), (2,0), (1,1)),
    ((1,0), (2,0), (1,-1)),
)


# 보드 전체 탐색
answer = 0
for i in range(n):
    for j in range(m):
        for block in blocks: # 모든 블럭을 확인
            ok = True
            s = board[i][j] # 시작 블럭칸
            for dx, dy in block:
                nx, ny = i + dx, j + dy
                if 0 <= nx < n and 0 <= ny < m:
                    s += board[nx][ny]
                else:
                    ok = False
                    break
            if ok and s > answer: # 보드에 놓을 수 있으면서 최댓값을 갱신하는 경우
                answer = s

print(answer)